/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adaptability.resources;

import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author kbotange
 */
public class Adaptability extends javax.swing.JFrame {
    
    /**
     * Creates new form Adaptability
     */
        static int atomic = 0;
        static int structured = 1;
        static int variationPoints = 0;
        static int variabilities = 0;
        static int invoke = 0;
        static int cs = 0;
    
        static int rvariationPoints = 0;
        static int rinvoke = 0;
            
    public Adaptability() {
        atomic = 0;
        structured = 1;
        variationPoints = 0;
        variabilities = 0;
        invoke = 0;
        cs = 0;
    
        rvariationPoints = 0;
        rinvoke = 0;
        
        initComponents();
        setDefaultCloseOperation(Adaptability.EXIT_ON_CLOSE);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtESVD = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtEBV = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtMBV = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtECAM = new javax.swing.JTextField();
        txtMaxSVD = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtMSVD = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtMCAM = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtvp = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtvr = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtinvoke = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtcs = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtatomic = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtstructured = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        metrics = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rmetric = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Open File");
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AdaptQ");
        setPreferredSize(new java.awt.Dimension(899, 950));

        jTextField1.setEditable(false);

        jLabel1.setText("Selected File:");

        jLabel2.setText("ESVD:");

        txtESVD.setEditable(false);
        txtESVD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtESVDActionPerformed(evt);
            }
        });

        jLabel3.setText("MSVD:");

        txtEBV.setEditable(false);
        txtEBV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEBVActionPerformed(evt);
            }
        });

        jLabel4.setText("EBV:");

        jLabel5.setText("MBV:");

        txtMBV.setEditable(false);
        txtMBV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMBVActionPerformed(evt);
            }
        });

        jLabel6.setText("ECAM:");

        txtECAM.setEditable(false);
        txtECAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtECAMActionPerformed(evt);
            }
        });

        txtMaxSVD.setEditable(false);
        txtMaxSVD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaxSVDActionPerformed(evt);
            }
        });

        jLabel7.setText("RMSV:");

        txtMSVD.setEditable(false);
        txtMSVD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMSVDActionPerformed(evt);
            }
        });

        jLabel8.setText("MCAM:");

        txtMCAM.setEditable(false);
        txtMCAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMCAMActionPerformed(evt);
            }
        });

        jLabel9.setText("Number of variable activities:");

        txtvp.setEditable(false);
        txtvp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtvpActionPerformed(evt);
            }
        });

        jLabel10.setText("Number of variabilities:");

        txtvr.setEditable(false);
        txtvr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtvrActionPerformed(evt);
            }
        });

        jLabel11.setText("<<<Structure variability>>> ");

        jLabel12.setText("<<<Binding variability>>> ");

        jLabel13.setText("Number of invoke activities:");

        txtinvoke.setEditable(false);
        txtinvoke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtinvokeActionPerformed(evt);
            }
        });

        jLabel14.setText("Number of partner services:");

        txtcs.setEditable(false);
        txtcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcsActionPerformed(evt);
            }
        });

        jLabel15.setText("Total number of atomic activities :");

        txtatomic.setEditable(false);
        txtatomic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtatomicActionPerformed(evt);
            }
        });

        jLabel16.setText("Total number of structured activities :");

        txtstructured.setEditable(false);
        txtstructured.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtstructuredActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMSVD, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtESVD, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(39, 39, 39)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtMBV, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtEBV, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtatomic, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(45, 45, 45)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtstructured, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel13)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtinvoke, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel14)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtcs, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel12)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtECAM, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtMCAM, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtMaxSVD, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(20, 20, 20))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtvp, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel11)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtvr, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                        .addComponent(txtEBV)
                        .addComponent(jLabel4)
                        .addComponent(jLabel6)
                        .addComponent(txtECAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMaxSVD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtESVD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                        .addComponent(jLabel8)
                        .addComponent(txtMCAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(txtMBV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMSVD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtatomic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(txtstructured, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtinvoke, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtcs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtvp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtvr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addGap(106, 106, 106))))
        );

        metrics.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---", "ESVD", "MSVD", "EBV", "MBV", "ECAM", "MCAM" }));
        metrics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metricsActionPerformed(evt);
            }
        });

        jLabel17.setText("Select to display runtime values: ");

        rmetric.setEditable(false);
        rmetric.setColumns(20);
        rmetric.setLineWrap(true);
        rmetric.setRows(5);
        rmetric.setWrapStyleWord(true);
        jScrollPane1.setViewportView(rmetric);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(metrics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(metrics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jButton1.setActionCommand("retry");
        jButton1.setLabel("RETRY");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        jMenu1.add(Open);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(27, 27, 27)))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(696, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        // TODO add your handling code here:
        
        
        int returnVal = fileChooser.showOpenDialog(this);
        
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            jTextField1.setText(file.getPath() + File.separator + file.getName());
            try {
            // What to do with the file, e.g. display it in a TextArea
            //    textarea.read( new FileReader( file.getAbsolutePath() ), null );
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(file);
                doc.getDocumentElement().normalize();
                Element root = doc.getDocumentElement(); // gets the root element
                
                if(root.getAttribute("vprefval").isEmpty()){
                }
                else
                {
                String esvd = ESVD(root);
                txtESVD.setText(esvd);
                }
                
                if(root.getAttribute("vprefval").isEmpty()){
                }
                else
                {
                String msvd = MSVD(root, doc);
                txtMSVD.setText(msvd);
                }
                //with reference value for concrete services
                /**
                if(root.getAttribute("csrefval").isEmpty()){
                }
                else
                {
                String ebvd = EBVD(root);
                txtEBVD.setText(ebvd);
                }
                
                if(root.getAttribute("csrefval").isEmpty()){
                }
                else
                {
                String mbvd = MBVD(root, doc);
                txtMBVD.setText(mbvd);
                }
                */
                
                //without csrefval
                String ebvd = EBV(root);
                txtEBV.setText(ebvd);
                
                String mbvd = MBV(root, doc);
                txtMBV.setText(mbvd);
                
                if(root.getAttribute("SVDweight").isEmpty() || root.getAttribute("BVDweight").isEmpty()){
                }
                else
                {
                String ecam = ECAM(root);
                txtECAM.setText(ecam);
                
                String mcam = MCAM(root);
                txtMCAM.setText(mcam);
                }
                
                if(root.getAttribute("vprefval").isEmpty()){
                }
                else
                {
                String maxesvd = MaxESVD(root);
                txtMaxSVD.setText(maxesvd);
                }
                
                
                
//properties counter

Element e = (Element)root;
NodeList nodeList = root.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                sequence(nodeList.item(i));
                structured ++;
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                sw(nodeList.item(i));
                structured ++;
            }else{
                Element el = (Element)nodeList.item(i);
                if (el.getNodeName().equals("invoke")){
                    cs = cs + Integer.parseInt(el.getAttribute("cs"));
                    invoke ++;
                }
                if(el.getAttribute("vp").compareTo("y")==0){                    
                    variabilities = variabilities + Integer.parseInt(el.getAttribute("vr"));                                        
                    variationPoints ++;
                }
                
            atomic ++;            
            }
        }
    }
        
    //printing the counters
                txtatomic.setText(Integer.toString(atomic));         
                txtstructured.setText(Integer.toString(structured));    
                txtvp.setText(Integer.toString(variationPoints));
                txtvr.setText(Integer.toString(variabilities));
                txtinvoke.setText(Integer.toString(invoke));
                txtcs.setText(Integer.toString(cs));
                
                XMLTreeViewer t = new XMLTreeViewer();
                t.createUI(file, this);
                
            } catch (IOException ex) {
            System.out.println("problem accessing file"+file.getAbsolutePath());
            } catch (Exception ex) {
            ex.printStackTrace();
            }
                
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_OpenActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
       // TODO add your handling code here:
       System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileChooserActionPerformed

    private void txtESVDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtESVDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtESVDActionPerformed

    private void txtMSVDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMSVDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMSVDActionPerformed

    private void txtEBVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEBVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEBVActionPerformed

    private void txtMBVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMBVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMBVActionPerformed

    private void txtECAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtECAMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtECAMActionPerformed

    private void txtMaxSVDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaxSVDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaxSVDActionPerformed

    private void txtMCAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMCAMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMCAMActionPerformed

    private void txtvpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtvpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtvpActionPerformed

    private void txtvrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtvrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtvrActionPerformed

    private void txtinvokeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtinvokeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtinvokeActionPerformed

    private void txtcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcsActionPerformed

    private void txtatomicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtatomicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtatomicActionPerformed

    private void txtstructuredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtstructuredActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtstructuredActionPerformed

    private void metricsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metricsActionPerformed
        // TODO add your handling code here:
        rmetric.setText("");
        File file = fileChooser.getSelectedFile();
        try {
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        Document doc = dBuilder.parse(file);
        doc.getDocumentElement().normalize();
        Element root = doc.getDocumentElement();
        
        String selectedMetric = (String) metrics.getSelectedItem();
        if (selectedMetric.equals("ESVD")){
            String resvd = rESVD(root);
            rmetric.setText(resvd);            
        }
        
        if (selectedMetric.equals("MSVD")){
            String rmsvd = rMSVD(root);
            rmetric.setText(rmsvd);            
        }
        
        if (selectedMetric.equals("EBV")){
            String rebv = rEBV(root);
            rmetric.setText(rebv);            
        }
        
        if (selectedMetric.equals("MBV")){
            String rmbv = rMBV(root);
            rmetric.setText(rmbv);            
        }
        
        } catch (IOException ex) {
            System.out.println("problem accessing file"+file.getAbsolutePath());
            } catch (Exception ex) {
            ex.printStackTrace();
            }        
    }//GEN-LAST:event_metricsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == jButton1) {
            this.dispose();
            new Adaptability();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    //The following code computes ESVD 
private static String ESVD(Node node){
double adaptVal = 0;
double vr;
int ref;
int n = 0;

Element e = (Element)node;
ref = Integer.parseInt(e.getAttribute("vprefval"));
NodeList nodeList = node.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = sequence(nodeList.item(i), ref);
                n++;
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = sw(nodeList.item(i), ref);                
                n++;
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("vr").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("vr")) / ref;
                    n++;
                }                
            System.out.println(vr);
            }
        adaptVal = adaptVal + vr;
        }
    }
    adaptVal = adaptVal/n;
    DecimalFormat f = new DecimalFormat("0.000");
    System.out.println("ESVD: " + f.format(adaptVal));    
    
    return f.format(adaptVal);
}


    //The following code computes RUNTIME ESVD 
private static String rESVD(Node node){
int ref;
String s = "Runtime ESVD:";
Element e = (Element)node;
ref = Integer.parseInt(e.getAttribute("vprefval"));

NodeList nodeList = node.getChildNodes();

    for (int x = 0, len = nodeList.getLength(); x < len; x++){
            
     double adaptVal = 0;
     double vr;     
     int n = 0;     
     
     for (int i = 0; i < len; i++) {
        
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE && i >= x) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = sequence(nodeList.item(i), ref);
                n++;
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = sw(nodeList.item(i), ref);                
                n++;
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("vr").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("vr")) / ref;
                    n++;
                }                
            System.out.println(vr);
            }
        adaptVal = adaptVal + vr;
        }
       
    }
    if (nodeList.item(x).getNodeType() == Node.ELEMENT_NODE){
    adaptVal = adaptVal/n;
    DecimalFormat f = new DecimalFormat("0.000");        
    s = s + ", "+f.format(adaptVal);    
    }
   }
    
    return s;
}


private static double sequence(Node node, int r){
double adaptVal = 0;
double vr;
int n = 0;
NodeList nodeList = node.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = sequence(nodeList.item(i), r);                  
                n++;
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = sw(nodeList.item(i), r);                
                n++;                
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("vr").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("vr")) / r;
                    n++;
                    
                }                
            }
        adaptVal = adaptVal + vr;
        }
    }
    adaptVal = adaptVal/n;
return adaptVal; 
}

private static double sw(Node node, int r){
double adaptVal = 0;
double vr;
int n = 0;
NodeList nodeList = node.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
        n++;
        }    
    }
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = sequence(nodeList.item(i),r) * ((double)1/n);
                              
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = sw(nodeList.item(i),r) * ((double)1/n);
                
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("vr").isEmpty()){
                    vr = 0;
                }else{
                    vr = (Double.parseDouble(el.getAttribute("vr")) / r) * ((double)1/n);
                    
                }                
            }
        adaptVal = adaptVal + vr;
        }
    }
return adaptVal; 
}

//for counting the process properties 

private static void sequence(Node node){
NodeList nodeList = node.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                sequence(nodeList.item(i));
                structured ++;
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                sw(nodeList.item(i));
                structured ++;                                
            }else{
                Element el = (Element)nodeList.item(i);
                if (el.getNodeName().equals("invoke")){
                    cs = cs + Integer.parseInt(el.getAttribute("cs"));
                    invoke ++;
                }
                
                if(el.getAttribute("vp").compareTo("y")==0){
                    variabilities = variabilities + Integer.parseInt(el.getAttribute("vr"));
                    variationPoints ++;
                }               
                atomic ++;
            }
        
        }
    }
}

private static void sw(Node node){
NodeList nodeList = node.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                sequence(nodeList.item(i));
                structured ++;
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                sw(nodeList.item(i));
                structured ++;                                
            }else{
                Element el = (Element)nodeList.item(i);
                if (el.getNodeName().equals("invoke")){
                    cs = cs + Integer.parseInt(el.getAttribute("cs"));
                    invoke ++;
                }
                
                if(el.getAttribute("vp").compareTo("y")==0){
                    variabilities = variabilities + Integer.parseInt(el.getAttribute("vr"));
                    variationPoints ++;
                }            
                atomic ++;
            }        
        }
    }
}

//for runtime SVD metrics 

private static double rsequence(Node node, int r){
double adaptVal = 0;
double vr;

NodeList nodeList = node.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = rsequence(nodeList.item(i), r);                  
                
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = rsw(nodeList.item(i), r);                
                                
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("vr").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("vr")) / r;
                    rvariationPoints ++;
                    
                }                
            }
        adaptVal = adaptVal + vr;
        }
    }
    
return adaptVal; 
}

private static double rsw(Node node, int r){
double adaptVal = 0;
double vr;

NodeList nodeList = node.getChildNodes();
    
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = rsequence(nodeList.item(i), r); 
                              
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = rsw(nodeList.item(i), r);   
                
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("vr").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("vr")) / r;
                    rvariationPoints ++;                    
                }                
            }
        adaptVal = adaptVal + vr;
        }
    }
return adaptVal; 
}


//for runtime BV metrics 

private static double rsequence4BV(Node node, int r){
double adaptVal = 0;
double vr;

NodeList nodeList = node.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = rsequence4BV(nodeList.item(i), r);                  
                
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = rsw4BV(nodeList.item(i), r);                
                                
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("cs").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("cs")) / r;
                    rinvoke ++;
                    
                }                
            }
        adaptVal = adaptVal + vr;
        }
    }
    
return adaptVal; 
}

private static double rsw4BV(Node node, int r){
double adaptVal = 0;
double vr;

NodeList nodeList = node.getChildNodes();
    
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = rsequence4BV(nodeList.item(i), r); 
                              
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = rsw4BV(nodeList.item(i), r);   
                
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("cs").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("cs")) / r;
                    rinvoke ++;                    
                }                
            }
        adaptVal = adaptVal + vr;
        }
    }
return adaptVal; 
}





    //The following code computes MSVD 
private static String MSVD(Node node, Document d){
double adaptVal = 0;
double vr;
int ref;
int n = 0;

Element e = (Element)node;
ref = Integer.parseInt(e.getAttribute("vprefval"));
NodeList nodeList = d.getElementsByTagName("*");
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
                        
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("vr").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("vr")) / ref;
                    n++;
                }                
            System.out.println(vr);
            
            adaptVal = adaptVal + vr;
        }
    }
    adaptVal = adaptVal/n;
    DecimalFormat f = new DecimalFormat("0.000");
    System.out.println("MSVD: " + f.format(adaptVal));    
    
    return f.format(adaptVal);
}

//The following code computes RUNTIME MSVD 
private static String rMSVD(Node node){
int ref;
String s = "Runtime MSVD:";
Element e = (Element)node;
ref = Integer.parseInt(e.getAttribute("vprefval"));

NodeList nodeList = node.getChildNodes();

    for (int x = 0, len = nodeList.getLength(); x < len; x++){
            
     double adaptVal = 0;
     double vr;     
     rvariationPoints = 0;     
     
     
     for (int i = 0; i < len; i++) {
        
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE && i >= x) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = rsequence(nodeList.item(i), ref);
                
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = rsw(nodeList.item(i), ref);                
                
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("vr").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("vr")) / ref;
                    rvariationPoints ++;
                }                
            
            }
        adaptVal = adaptVal + vr;
        }       
    }
    if (nodeList.item(x).getNodeType() == Node.ELEMENT_NODE){
    adaptVal = adaptVal/rvariationPoints;
    DecimalFormat f = new DecimalFormat("0.000");        
    s = s + ", "+f.format(adaptVal);    
    }
   }
    
    return s;
}




//The following code computes EBVD 
/**
private static String EBVD(Node node){
double adaptVal = 0;
double vr;
int ref;
int n = 0;

Element e = (Element)node;
ref = Integer.parseInt(e.getAttribute("csrefval"));
NodeList nodeList = node.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = sequenceBVD(nodeList.item(i), ref);
                System.out.println(vr);   
                n++;
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = swBVD(nodeList.item(i), ref);
                System.out.println(vr);
                n++;
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("cs").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("cs")) / ref;
                    n++;
                }                
            System.out.println(vr);
            }
        adaptVal = adaptVal + vr;
        }
    }
    adaptVal = adaptVal/n;
    DecimalFormat f = new DecimalFormat("0.000");
    System.out.println("EBVD: " + f.format(adaptVal));    
    
    return f.format(adaptVal);
}
*/

//The following code computes EBV 
private static String EBV(Node node){
double adaptVal = 0;
double vr;
int ref = 1;
int n = 0;

Element e = (Element)node;
NodeList nodeList = node.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = sequenceBVD(nodeList.item(i), ref);                  
                n++;
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = swBVD(nodeList.item(i), ref);                
                n++;
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("cs").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("cs")) / ref;
                    n++;
                }                
            
            }
        adaptVal = adaptVal + vr;
        }
    }
    adaptVal = adaptVal/n;
    DecimalFormat f = new DecimalFormat("0.000");
    System.out.println("EBV: " + f.format(adaptVal));    
    
    return f.format(adaptVal);
}

    //The following code computes RUNTIME EBV 
private static String rEBV(Node node){
int ref = 1;
String s = "Runtime EBV:";
Element e = (Element)node;


NodeList nodeList = node.getChildNodes();

    for (int x = 0, len = nodeList.getLength(); x < len; x++){
            
     double adaptVal = 0;
     double vr;     
     int n = 0;     
     
     for (int i = 0; i < len; i++) {
        
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE && i >= x) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = sequenceBVD(nodeList.item(i), ref);                  
                n++;
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = swBVD(nodeList.item(i), ref);                
                n++;
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("cs").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("cs")) / ref;
                    n++;
                }                
            
            }
        adaptVal = adaptVal + vr;
        }
       
    }
    if (nodeList.item(x).getNodeType() == Node.ELEMENT_NODE){
    adaptVal = adaptVal/n;
    DecimalFormat f = new DecimalFormat("0.000");        
    if (n==0){
        s = s + ", 0";
        }else{
        s = s + ", "+f.format(adaptVal);    
        }
    }
   }
    
    return s;
}


//The following code computes RUNTIME MBV 
private static String rMBV(Node node){
int ref = 1;
String s = "Runtime MBV:";
Element e = (Element)node;

NodeList nodeList = node.getChildNodes();

    for (int x = 0, len = nodeList.getLength(); x < len; x++){
            
     double adaptVal = 0;
     double vr;     
     rinvoke = 0;     
     
     
     for (int i = 0; i < len; i++) {
        
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE && i >= x) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = rsequence4BV(nodeList.item(i), ref);
                
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = rsw4BV(nodeList.item(i), ref);                
                
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("cs").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("cs")) / ref;
                    rinvoke ++;
                }                
            
            }
        adaptVal = adaptVal + vr;
        }       
    }
    if (nodeList.item(x).getNodeType() == Node.ELEMENT_NODE){
    adaptVal = adaptVal/rinvoke;
    DecimalFormat f = new DecimalFormat("0.000");        
    if (rinvoke==0){
        s = s + ", 0";
        }else{
        s = s + ", "+f.format(adaptVal);    
        }    
    }
   }
    
    return s;
}


private static double sequenceBVD(Node node, int r){
double adaptVal = 0;
double vr;
int n = 0;
NodeList nodeList = node.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = sequenceBVD(nodeList.item(i), r);
                System.out.println(vr);   
                n++;
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = swBVD(nodeList.item(i), r);
                System.out.println(vr);
                n++;                
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("cs").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("cs")) / r;
                    n++;
                }                
            }
        adaptVal = adaptVal + vr;
        }
    }
    adaptVal = adaptVal/n;
return adaptVal; 
}

private static double swBVD(Node node, int r){
double adaptVal = 0;
double vr;
int n = 0;
NodeList nodeList = node.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
        n++;
        }    
    }
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = sequenceBVD(nodeList.item(i),r) * ((double)1/n);
                                
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = swBVD(nodeList.item(i),r) * ((double)1/n);
                
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("cs").isEmpty()){
                    vr = 0;
                }else{
                    vr = (Double.parseDouble(el.getAttribute("cs")) / r) * ((double)1/n);
                }                
            }
        adaptVal = adaptVal + vr;
        }
    }
return adaptVal; 
}

 //The following code computes MBVD 
/**
private static String MBVD(Node node, Document d){
double adaptVal = 0;
double vr;
int ref;
int n = 0;

Element e = (Element)node;
ref = Integer.parseInt(e.getAttribute("csrefval"));
NodeList nodeList = d.getElementsByTagName("*");
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("cs").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("cs")) / ref;
                    n++;
                }                
            System.out.println(vr);
            
            adaptVal = adaptVal + vr;
        }
    }
    adaptVal = adaptVal/n;
    DecimalFormat f = new DecimalFormat("0.000");
    System.out.println("MBVD: " + f.format(adaptVal));    
    
    return f.format(adaptVal);
}
*/

//computes for MBV
private static String MBV(Node node, Document d){
double adaptVal = 0;
double vr;
int ref = 1;
int n = 0;

Element e = (Element)node;
NodeList nodeList = d.getElementsByTagName("*");
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("cs").isEmpty()){
                    vr = 0;
                }else{
                    vr = Double.parseDouble(el.getAttribute("cs")) / ref;
                    n++;
                }                
            System.out.println(vr);
            
            adaptVal = adaptVal + vr;
        }
    }
    adaptVal = adaptVal/n;
    DecimalFormat f = new DecimalFormat("0.000");
    System.out.println("MBV: " + f.format(adaptVal));    
    
    return f.format(adaptVal);
}

//The following code computes ECAM 
private String ECAM(Node node){
  
Element e = (Element)node;
double weight_svd = Double.parseDouble(e.getAttribute("SVDweight"));
double weight_bvd = Double.parseDouble(e.getAttribute("BVDweight"));

double ebv = (1/(1+Math.exp(-1*(0.1*Double.parseDouble(txtEBV.getText()))))-0.5)*2;

double adaptVal = (ebv * weight_bvd) + (Double.parseDouble(txtESVD.getText()) * weight_svd);
    DecimalFormat f = new DecimalFormat("0.000");
    System.out.println("ECAM: " + f.format(adaptVal));    
    System.out.println("EBVD: " + f.format(ebv));    
    
    return f.format(adaptVal);
}

//The following code computes MCAM 
private String MCAM(Node node){
  
Element e = (Element)node;
double weight_svd = Double.parseDouble(e.getAttribute("SVDweight"));
double weight_bvd = Double.parseDouble(e.getAttribute("BVDweight"));

double mbv = (1/(1+Math.exp(-1*(0.1*Double.parseDouble(txtMBV.getText()))))-0.5)*2;


double adaptVal = (mbv * weight_bvd) + (Double.parseDouble(txtMSVD.getText()) * weight_svd);
    DecimalFormat f = new DecimalFormat("0.000");
    System.out.println("MCAM: " + f.format(adaptVal));    
    System.out.println("MBVD: " + f.format(mbv));    
    
    return f.format(adaptVal);
}


    //The following code computes MaxSVD or RMSV
private static String MaxESVD(Node node){
double adaptVal = 0;
double vr;
int ref;
int n = 0;

Element e = (Element)node;
ref = Integer.parseInt(e.getAttribute("vprefval"));
NodeList nodeList = node.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = sequenceMaxSVD(nodeList.item(i), ref);
                System.out.println(vr);   
                n++;
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = swMaxSVD(nodeList.item(i), ref);
                System.out.println(vr);
                n++;
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("vr").isEmpty()){
                    vr = 0;
                    n++;
                }else{
                    vr = ref / ref;
                    n++;
                }                
            System.out.println(vr);
            }
        adaptVal = adaptVal + vr;
        }
    }
    adaptVal = adaptVal/n;
    DecimalFormat f = new DecimalFormat("0.000");
    System.out.println("MaxESVD: " + f.format(adaptVal));    
    
    return f.format(adaptVal);
}

private static double sequenceMaxSVD(Node node, int r){
double adaptVal = 0;
double vr;
int n = 0;
NodeList nodeList = node.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = sequenceMaxSVD(nodeList.item(i), r);
                   
                n++;
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = swMaxSVD(nodeList.item(i), r);
                
                n++;                
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("vr").isEmpty()){
                    vr = 0;
                    n++;
                }else{
                    vr = r / r;
                    n++;
                }                
            }
        adaptVal = adaptVal + vr;
        }
    }
    adaptVal = adaptVal/n;
return adaptVal; 
}

private static double swMaxSVD(Node node, int r){
double adaptVal = 0;
double vr;
int n = 0;
NodeList nodeList = node.getChildNodes();
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
        n++;
        }    
    }
    for (int i = 0, len = nodeList.getLength(); i < len; i++) {
        if (nodeList.item(i).getNodeType() == Node.ELEMENT_NODE) {
            System.out.println(nodeList.item(i).getNodeName());       
            if(nodeList.item(i).getNodeName().equals("sequence")){
                vr = sequenceMaxSVD(nodeList.item(i),r) * ((double)1/n);
                System.out.println(vr);                
            }else if(nodeList.item(i).getNodeName().equals("switch")){
                vr = swMaxSVD(nodeList.item(i),r) * ((double)1/n);
                System.out.println(vr);
            }else{
                Element el = (Element)nodeList.item(i);
                if(el.getAttribute("vr").isEmpty()){
                    vr = 0;
                }else{
                    vr = (r / r) * ((double)1/n);
                }                
            }
        adaptVal = adaptVal + vr;
        }
    }
return adaptVal; 
}


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Adaptability.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Adaptability.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Adaptability.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Adaptability.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Adaptability().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Open;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<String> metrics;
    private javax.swing.JTextArea rmetric;
    private javax.swing.JTextField txtEBV;
    private javax.swing.JTextField txtECAM;
    private javax.swing.JTextField txtESVD;
    private javax.swing.JTextField txtMBV;
    private javax.swing.JTextField txtMCAM;
    private javax.swing.JTextField txtMSVD;
    private javax.swing.JTextField txtMaxSVD;
    private javax.swing.JTextField txtatomic;
    private javax.swing.JTextField txtcs;
    private javax.swing.JTextField txtinvoke;
    private javax.swing.JTextField txtstructured;
    private javax.swing.JTextField txtvp;
    private javax.swing.JTextField txtvr;
    // End of variables declaration//GEN-END:variables
}
